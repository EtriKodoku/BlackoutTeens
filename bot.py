import os;
import telebot;
from dotenv import load_dotenv;
import markup as nav
from peewee import *

# python-dotenv library is used for saving telegram token so it will not leak to network
load_dotenv()
db = SqliteDatabase('db.sqlite3')


state_storage=StateMemoryStorage()
bot = telebot.TeleBot(os.getenv("TOKEN"))

class DbOperatorPoll(Model):
    chat_id = IntegerField(primary_key=True)
    zero = CharField(NULL = True)
    operator = CharField(NULL = True)
    rings = CharField(NULL = True)
    rings_time = CharField(NULL = True)
    network = CharField(NULL = True)
    price = CharField(NULL = True)
    
    class Meta:
        database = db
    
    def into_operatorpoll(self) -> OperatorPoll:
        op = OperatorPoll(self.zero)
        op.operator = self.operator
        op.rings = self.rings
        op.rings_time = self.rings_time
        op.network = self.network
        op.price = self.price
        return op


class UsersDict(dict):
    def __getitem__(self, __key: int) -> DbOperatorPoll:
        return DbOperatorPoll.get(DbOperatorPoll.chat_id == __key)
    
    def __setitem__(self, __key: int, __value: DbOperatorPoll) -> None:
        DbOperatorPoll.get_or_create(
            chat_id=__key,
            zero=__value.zero,
            operator=__value.operator,
            rings=__value.rings,
            rings_time=__value.rings_time,
            network=__value.network,
            price=__value.price,
        )

user_dict = {}

# States group.
class OperatorPoll:
    def __init__(self, zero): 
        self.zero = zero
        self.operator = None
        self.rings = None
        self.rings_time = None
        self.network = None
        self.price = None
    
    def into_dboperatorpoll(self, chat_id: int) -> DbOperatorPoll:
        DbOperatorPoll(
            chat_id = chat_id,
            zero = self.zero,
            operator = self.operator,
            rings = self.rings,
            rings_time = self.rings_time,
            network = self.network,
            price = self.price,
)


@bot.message_handler(commands=['life'])
def life(message):
    bot.register_next_step_handler(message, zero_q)
    bot.send_message(message.chat.id, text="–†–æ–∑–ø–æ—á–Ω—ñ–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è. –ü–∏—Ç–∞–Ω–Ω—è ‚Ññ0: –Ø–∫–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å?ü§î", reply_markup=nav.zero)


def zero_q(message):
    zero = message.text
    user = OperatorPoll(zero)
    chat_id = message.chat.id
    user_dict[chat_id] = user
    if message.text not in ["Lifecell"]:
        bot.send_message(message.chat.id, text="–ú–∏ —Ä–∞–¥–∏–º–æ –≤–∞–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ–∏ –≤—ñ–¥ Lifecellüòä")
    else:
        bot.send_message(message.chat.id, text="–ú–∏ —Ä–∞–¥—ñ, —â–æ –≤–∏ –¥–æ–≤—ñ—Ä—è—î—Ç–µ –Ω–∞–º‚ù§Ô∏è. –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –¥–ª—è –≤–∞—Å –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞—Ä–∏—Ñ")
    bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ1.  –ß–∏ —á–∞—Å—Ç–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–∑–≤–æ–Ω–∏—Ç–∏ –Ω–∞ –Ω–æ–º–µ—Ä–∏ —ñ–Ω—à–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤?üìû", reply_markup=nav.operator)
    bot.register_next_step_handler(message, operator_q)


def operator_q(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ0: –Ø–∫–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å?ü§î", reply_markup=nav.zero)
        bot.register_next_step_handler(message, zero_q)
    elif message.text not in nav.operator_buttons:
        bot.send_message(message.chat.id, text="–ü–µ—Ä–µ–ø—Ä–æ—à—É—éüëª. –Ø –ø—Ä–∏–π–º–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç—ñ–ª—å–∫–∏ —Ç–∞–∫–∏–º–∏, —è–∫–∏–º–∏ –≤–æ–Ω–∏ —î –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—Ö –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑—ñ –º–Ω–æ—é")
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ1.  –ß–∏ —á–∞—Å—Ç–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–∑–≤–æ–Ω–∏—Ç–∏ –Ω–∞ –Ω–æ–º–µ—Ä–∏ —ñ–Ω—à–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤?üìû", reply_markup=nav.operator)
        bot.register_next_step_handler(message, operator_q)
    else:
        chat_id = message.chat.id
        user_dict[chat_id].operator = message.text
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ2. –Ø–∫ —á–∞—Å—Ç–æ –≤–∏ –¥–∑–≤–æ–Ω–∏—Ç–µ?üìû \n1. –ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –º—ñ—Å—è—Ü—å. \n2. –†–∞–∑ –≤ —Ç–∏–∂–¥–µ–Ω—å. \n3. –ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å. \n4. –ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å)", reply_markup=nav.rings)
        bot.register_next_step_handler(message, ring_q)


def ring_q(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ1.  –ß–∏ —á–∞—Å—Ç–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–∑–≤–æ–Ω–∏—Ç–∏ –Ω–∞ –Ω–æ–º–µ—Ä–∏ —ñ–Ω—à–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤?üìû", reply_markup=nav.operator)
        bot.register_next_step_handler(message, operator_q)
    elif message.text not in nav.rings_buttons:
        bot.send_message(message.chat.id, text="–ü–µ—Ä–µ–ø—Ä–æ—à—É—éüëª. –Ø –ø—Ä–∏–π–º–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç—ñ–ª—å–∫–∏ —Ç–∞–∫–∏–º–∏, —è–∫–∏–º–∏ –≤–æ–Ω–∏ —î –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—Ö –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑—ñ –º–Ω–æ—é")
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ2. –Ø–∫ —á–∞—Å—Ç–æ –≤–∏ –¥–∑–≤–æ–Ω–∏—Ç–µ?üìû \n1. –ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –º—ñ—Å—è—Ü—å. \n2. –†–∞–∑ –≤ —Ç–∏–∂–¥–µ–Ω—å. \n3. –ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å. \n4. –ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å)", reply_markup=nav.rings)
        bot.register_next_step_handler(message, ring_q)
    else:
        chat_id = message.chat.id
        user_dict[chat_id].rings = message.text
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ3. –°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ç—Ä–∏–≤–∞—é—Ç—å –¥–∑–≤—ñ–Ω–∫–∏?‚è± \n1.–î–æ —Ç—Ä—å–æ—Ö —Ö–≤–∏–ª–∏–Ω \n2. –î–µ—Å—è—Ç—å —Ö–≤–∏–ª–∏–Ω \n3. –ü—ñ–≤–≥–æ–¥–∏–Ω–∏. \n4. –ù–µ –∫–ª–∞–¥—É —Å–ª—É—Ö–∞–≤–∫—É)", reply_markup=nav.rings)
        bot.register_next_step_handler(message, ring_time)


def ring_time(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ2. –Ø–∫ —á–∞—Å—Ç–æ –≤–∏ –¥–∑–≤–æ–Ω–∏—Ç–µ?üìû \n1. –ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –º—ñ—Å—è—Ü—å. \n2. –†–∞–∑ –≤ —Ç–∏–∂–¥–µ–Ω—å. \n3. –ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å. \n4. –ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å)", reply_markup=nav.rings)
        bot.register_next_step_handler(message, ring_q)
    elif message.text not in nav.rings_buttons:
        bot.send_message(message.chat.id, text="–ü–µ—Ä–µ–ø—Ä–æ—à—É—éüëª. –Ø –ø—Ä–∏–π–º–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç—ñ–ª—å–∫–∏ —Ç–∞–∫–∏–º–∏, —è–∫–∏–º–∏ –≤–æ–Ω–∏ —î –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—Ö –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑—ñ –º–Ω–æ—é")
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ3. –°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ç—Ä–∏–≤–∞—é—Ç—å –¥–∑–≤—ñ–Ω–∫–∏?‚è± \n1.–î–æ —Ç—Ä—å–æ—Ö —Ö–≤–∏–ª–∏–Ω \n2. –î–µ—Å—è—Ç—å —Ö–≤–∏–ª–∏–Ω \n3. –ü—ñ–≤–≥–æ–¥–∏–Ω–∏. \n4. –ù–µ –∫–ª–∞–¥—É —Å–ª—É—Ö–∞–≤–∫—É)", reply_markup=nav.rings)
        bot.register_next_step_handler(message, ring_time)
    else:
        chat_id = message.chat.id
        user_dict[chat_id].rings_time = message.text
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ4. –Ø–∫ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –º–æ–±—ñ–ª—å–Ω—ñ –¥–∞–Ω—ñ?üì± \n1. –ú–µ—Å–µ–Ω–¥–∂–µ—Ä—ñ \n2. –î–∏–≤–ª—é—Å—å –≤—ñ–¥–µ–æ, —Ñ—ñ–ª—å–º–∏. \n3. –†–æ–∑–¥–∞—é –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä \n4.–¢—Ä–∏–º–∞—é –±–æ—Ç–æ—Ñ–µ—Ä–º—É)", reply_markup=nav.rings)
        bot.register_next_step_handler(message, network)


def network(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ3. –°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ç—Ä–∏–≤–∞—é—Ç—å –¥–∑–≤—ñ–Ω–∫–∏?‚è± \n1.–î–æ —Ç—Ä—å–æ—Ö —Ö–≤–∏–ª–∏–Ω \n2. –î–µ—Å—è—Ç—å —Ö–≤–∏–ª–∏–Ω \n3. –ü—ñ–≤–≥–æ–¥–∏–Ω–∏. \n4. –ù–µ –∫–ª–∞–¥—É —Å–ª—É—Ö–∞–≤–∫—É)", reply_markup=nav.rings)
        bot.register_next_step_handler(message, ring_time)
    elif message.text not in nav.rings_buttons:
        bot.send_message(message.chat.id, text="–ü–µ—Ä–µ–ø—Ä–æ—à—É—éüëª. –Ø –ø—Ä–∏–π–º–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç—ñ–ª—å–∫–∏ —Ç–∞–∫–∏–º–∏, —è–∫–∏–º–∏ –≤–æ–Ω–∏ —î –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—Ö –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑—ñ –º–Ω–æ—é")
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ4. –Ø–∫ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –º–æ–±—ñ–ª—å–Ω—ñ –¥–∞–Ω—ñ?üì± \n1. –ú–µ—Å–µ–Ω–¥–∂–µ—Ä—ñ \n2. –î–∏–≤–ª—é—Å—å –≤—ñ–¥–µ–æ, —Ñ—ñ–ª—å–º–∏. \n3. –†–æ–∑–¥–∞—é –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä \n4.–¢—Ä–∏–º–∞—é –±–æ—Ç–æ—Ñ–µ—Ä–º—É)", reply_markup=nav.rings)
        bot.register_next_step_handler(message, network)
    else:
        chat_id = message.chat.id
        user_dict[chat_id].network = message.text
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ5. –°–∫—ñ–ª—å–∫–∏ –≤–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ –Ω–∞ –ø–æ—Å–ª—É–≥–∏ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É?üí∏ \n1. –î–æ 200 –≥—Ä–Ω \n2. 200-400 –≥—Ä–Ω \n3. –°—Ç—ñ–ª—å–∫–∏, —Å–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –¥–ª—è –º–æ—ó—Ö –ø–æ—Ç—Ä–µ–±", reply_markup=nav.price)
        bot.register_next_step_handler(message, price)


def price(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ4. –Ø–∫ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –º–æ–±—ñ–ª—å–Ω—ñ –¥–∞–Ω—ñ?üì± \n1. –ú–µ—Å–µ–Ω–¥–∂–µ—Ä—ñ \n2. –î–∏–≤–ª—é—Å—å –≤—ñ–¥–µ–æ, —Ñ—ñ–ª—å–º–∏. \n3. –†–æ–∑–¥–∞—é –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä \n4.–¢—Ä–∏–º–∞—é –±–æ—Ç–æ—Ñ–µ—Ä–º—É)", reply_markup=nav.rings)
        bot.register_next_step_handler(message, network)
        
    elif message.text not in nav.price_buttons:
        bot.send_message(message.chat.id, text="–ü–µ—Ä–µ–ø—Ä–æ—à—É—éüëª. –Ø –ø—Ä–∏–π–º–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç—ñ–ª—å–∫–∏ —Ç–∞–∫–∏–º–∏, —è–∫–∏–º–∏ –≤–æ–Ω–∏ —î –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—Ö –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑—ñ –º–Ω–æ—é")
        bot.send_message(message.chat.id, text="–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ5. –°–∫—ñ–ª—å–∫–∏ –≤–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ –Ω–∞ –ø–æ—Å–ª—É–≥–∏ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É?üí∏ \n1. –î–æ 200 –≥—Ä–Ω \n2. 200-400 –≥—Ä–Ω \n3. –°—Ç—ñ–ª—å–∫–∏, —Å–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –¥–ª—è –º–æ—ó—Ö –ø–æ—Ç—Ä–µ–±", reply_markup=nav.price)
        bot.register_next_step_handler(message, price)
        
    else:
        chat_id = message.chat.id
        user_dict[chat_id].price = message.text
        bot.send_message(message.chat.id, text="–°–µ–∫—É–Ω–¥–æ—á–∫—É. –ü—ñ–¥–±–∏—Ä–∞—î–º–æ —Ç–∞—Ä–∏—Ñ, —è–∫–∏–π –≤–∞–º —ñ–¥–µ–∞–ª—å–Ω–æ –ø–∞—Å—É–≤–∞—Ç–∏–º–µ")
        calculation_result = calculation
        bot.send_message(chat_id, text=f'–í–∞–º –Ω–∞–π–∫—Ä–∞—â–µ –ø—ñ–¥—ñ–π–¥–µ: {calculation_result}')


def calculation(chat_id):
    userpoll = user_dict[chat_id]
    userpoll.network
    userpoll.rings_time
    userpoll.rings
    userpoll.price
    userpoll.user
    school = "–®–∫—ñ–ª—å–Ω–∏–π - 150 –≥—Ä–Ω - 7 –ì–ë - –±–µ–∑–ª—ñ–º –Ω–∞ –ª–∞–π—Ñ"
    simple = "–ü—Ä–æ—Å—Ç–æ - 160 - 8 –ì–ë - 300 —Ö–≤"
    smart = "–°–º–∞—Ä—Ç - 225 - 25 –ì–ë - 800 —Ö–≤"
    free = "–í—ñ–ª—å–Ω–∏–π 325 - –±–µ–∑–ª—ñ–º—ñ—Ç - 1600 —Ö–≤"
    platium = "–ü–ª–∞—Ç–∏–Ω—É–º - 450 –≥—Ä–Ω - –±–µ–∑–ª—ñ–º - 3000 —Ö–≤, –±–µ–∑–ª—ñ–º –Ω–∞ –ª–∞–π—Ñ"


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, text='üëã–í—ñ—Ç–∞—î–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ñ. –î–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø—Ä–æ–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É "/help" ')


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, text="""–û—Ç–∂–µ, –æ—Å—å —â–æ —è –≤–º—ñ—é:
    /help -- —Ü—è –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∫–∏–Ω–µ –≤–∞—Å —Å—é–¥–∏. –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –º–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó;
    /life -- —Ü—è –∫–æ–º–∞–Ω–¥–∞ —Ä–æ–∑–ø–æ—á–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, —è–∫–µ –¥–æ–ø–æ–º–æ–∂–µ –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —è–∫–∏–π —Ç–∞—Ä–∏—Ñ –≤–∞–º –ø—ñ–¥—ñ–π–¥–µ
    /support -- """)
    

@bot.message_handler(content_types=['text'])
def text_handler(chat_id):
    bot.send_message(chat_id, text='–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤')


bot.polling(none_stop=True, interval=0.5)